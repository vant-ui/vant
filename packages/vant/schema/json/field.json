{
  "tagName": "Field",
  "pkgId": "vant",
  "type": "object",
  "properties": {
    "name": {
      "title": "Field 输入框",
      "description": "组件名称"
    },
    "tagName": {
      "title": "Field",
      "description": "组件标签"
    },
    "advanceProps": {
      "title": "高级属性",
      "description": "高级属性",
      "type": "object",
      "properties": {
        "condition": {
          "title": "是否渲染",
          "description": "是否渲染",
          "type": "string",
          "valueType": "switch",
          "default": true
        }
      }
    },
    "hasChild": {
      "type": "boolean",
      "const": true,
      "title": "支持调用子组件",
      "description": "true:支持;false:不支持"
    },
    "props": {
      "type": "object",
      "title": "组件属性",
      "description": "组件属性",
      "required": [
        "rows",
        "type",
        "rules",
        "autosize",
        "labelWidth",
        "labelClass",
        "labelAlign",
        "showWordLimit",
        "errorMessageAlign",
        "colon",
        "default",
        "props",
        "emits",
        "'update",
        "status",
        "focused",
        "validateMessage",
        "const{parent",
        "message",
        "name",
        "//see",
        "value",
        "trigger",
        "//https",
        "emit('update",
        "return{width",
        "error",
        "custom",
        "'min-height'",
        "id",
        "ref",
        "class",
        "disabled",
        "readonly",
        "autofocus",
        "placeholder",
        "autocomplete",
        "enterkeyhint",
        "'aria-labelledby'",
        "onClick",
        "onChange",
        "onCompositionend",
        "onCompositionstart",
        ")",
        "title",
        "extra",
        "[`label-${labelAlign}`]",
        "bem('label',[labelAlign,{required"
      ],
      "properties": {
        "rows": {
          "enum": [],
          "type": [
            "props.rows !== undefined ? +props.rows : undefined"
          ],
          "title": "rows",
          "option": false,
          "valueType": "text"
        },
        "type": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "type",
          "option": false,
          "valueType": "switch"
        },
        "rules": {
          "enum": [],
          "type": [
            "Array as PropType<FieldRule[]>"
          ],
          "title": "rules",
          "option": false,
          "valueType": "text"
        },
        "autosize": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "autosize",
          "option": false,
          "valueType": "switch"
        },
        "labelWidth": {
          "enum": [],
          "type": [
            "numericProp"
          ],
          "title": "labelWidth",
          "option": false,
          "valueType": "text"
        },
        "labelClass": {
          "enum": [],
          "type": [
            "unknownProp"
          ],
          "title": "labelClass",
          "option": false,
          "valueType": "text"
        },
        "labelAlign": {
          "enum": [],
          "type": [
            "String as PropType<FieldTextAlign>"
          ],
          "title": "labelAlign",
          "option": false,
          "valueType": "text"
        },
        "showWordLimit": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "showWordLimit",
          "option": false,
          "valueType": "switch"
        },
        "errorMessageAlign": {
          "enum": [],
          "type": [
            "String as PropType<FieldTextAlign>"
          ],
          "title": "errorMessageAlign",
          "option": false,
          "valueType": "text"
        },
        "colon": {
          "enum": [],
          "type": [
            "{"
          ],
          "title": "colon",
          "option": false,
          "valueType": "text"
        },
        "default": {
          "enum": [],
          "type": [
            "null"
          ],
          "title": "default",
          "option": false,
          "valueType": "text"
        },
        "props": {
          "enum": [],
          "type": [
            "fieldProps"
          ],
          "title": "props",
          "option": false,
          "valueType": "text"
        },
        "emits": {
          "enum": [],
          "type": [
            "["
          ],
          "title": "emits",
          "option": false,
          "valueType": "text"
        },
        "'update": {
          "enum": [],
          "type": [
            "modelValue'"
          ],
          "title": "'update",
          "option": false,
          "valueType": "text"
        },
        "status": {
          "enum": [],
          "type": [
            "state.status"
          ],
          "title": "status",
          "option": false,
          "valueType": "text"
        },
        "focused": {
          "enum": [],
          "type": [
            "false"
          ],
          "title": "focused",
          "option": false,
          "valueType": "text"
        },
        "validateMessage": {
          "enum": [],
          "type": [
            "''"
          ],
          "title": "validateMessage",
          "option": false,
          "valueType": "text"
        },
        "const{parent": {
          "enum": [],
          "type": [
            "form } = useParent(FORM_KEY);"
          ],
          "title": "const{parent",
          "option": false,
          "valueType": "text"
        },
        "message": {
          "enum": [],
          "type": [
            "state.validateMessage"
          ],
          "title": "message",
          "option": false,
          "valueType": "text"
        },
        "name": {
          "enum": [],
          "type": [
            "props.name"
          ],
          "title": "name",
          "option": false,
          "valueType": "text"
        },
        "//see": {
          "enum": [],
          "type": [
            "https://github.com/vant-ui/vant/issues/5033"
          ],
          "title": "//see",
          "option": false,
          "valueType": "text"
        },
        "value": {
          "enum": [],
          "type": [
            "renderFieldBody"
          ],
          "title": "value",
          "option": false,
          "valueType": "text"
        },
        "trigger": {
          "enum": [],
          "type": [
            "FieldFormatTrigger = 'onChange'"
          ],
          "title": "trigger",
          "option": false,
          "valueType": "text"
        },
        "//https": {
          "enum": [],
          "type": [
            "//github.com/youzan/vant/issues/11289"
          ],
          "title": "//https",
          "option": false,
          "valueType": "text"
        },
        "emit('update": {
          "enum": [],
          "type": [
            "modelValue' '');"
          ],
          "title": "emit('update",
          "option": false,
          "valueType": "text"
        },
        "return{width": {
          "enum": [],
          "type": [
            "addUnit(labelWidth) };"
          ],
          "title": "return{width",
          "option": false,
          "valueType": "text"
        },
        "error": {
          "enum": [],
          "type": [
            "showError.value"
          ],
          "title": "error",
          "option": false,
          "valueType": "text"
        },
        "custom": {
          "enum": [],
          "type": [
            "!!slots.input"
          ],
          "title": "custom",
          "option": false,
          "valueType": "text"
        },
        "'min-height'": {
          "enum": [],
          "type": [
            "props.type === 'textarea' && !props.autosize"
          ],
          "title": "'min-height'",
          "option": false,
          "valueType": "text"
        },
        "id": {
          "enum": [],
          "type": [
            "getInputId()"
          ],
          "title": "id",
          "option": false,
          "valueType": "text"
        },
        "ref": {
          "enum": [],
          "type": [
            "inputRef"
          ],
          "title": "ref",
          "option": false,
          "valueType": "text"
        },
        "class": {
          "enum": [],
          "type": [
            "controlClass"
          ],
          "title": "class",
          "option": false,
          "valueType": "text"
        },
        "disabled": {
          "enum": [],
          "type": [
            "getProp('disabled')"
          ],
          "title": "disabled",
          "option": false,
          "valueType": "text"
        },
        "readonly": {
          "enum": [],
          "type": [
            "getProp('readonly')"
          ],
          "title": "readonly",
          "option": false,
          "valueType": "text"
        },
        "autofocus": {
          "enum": [],
          "type": [
            "props.autofocus"
          ],
          "title": "autofocus",
          "option": false,
          "valueType": "text"
        },
        "placeholder": {
          "enum": [],
          "type": [
            "props.placeholder"
          ],
          "title": "placeholder",
          "option": false,
          "valueType": "text"
        },
        "autocomplete": {
          "enum": [],
          "type": [
            "props.autocomplete"
          ],
          "title": "autocomplete",
          "option": false,
          "valueType": "text"
        },
        "enterkeyhint": {
          "enum": [],
          "type": [
            "props.enterkeyhint"
          ],
          "title": "enterkeyhint",
          "option": false,
          "valueType": "text"
        },
        "'aria-labelledby'": {
          "enum": [],
          "type": [
            "props.label ? `${id}-label` : undefined"
          ],
          "title": "'aria-labelledby'",
          "option": false,
          "valueType": "text"
        },
        "onClick": {
          "enum": [],
          "type": [
            "onClickInput"
          ],
          "title": "onClick",
          "option": false,
          "valueType": "text"
        },
        "onChange": {
          "enum": [],
          "type": [
            "endComposing"
          ],
          "title": "onChange",
          "option": false,
          "valueType": "text"
        },
        "onCompositionend": {
          "enum": [],
          "type": [
            "endComposing"
          ],
          "title": "onCompositionend",
          "option": false,
          "valueType": "text"
        },
        "onCompositionstart": {
          "enum": [],
          "type": [
            "startComposing"
          ],
          "title": "onCompositionstart",
          "option": false,
          "valueType": "text"
        },
        ")": {
          "enum": [],
          "type": [
            "("
          ],
          "title": ")",
          "option": false,
          "valueType": "text"
        },
        "{slotslot({message})": {
          "enum": [],
          "type": [
            "message}"
          ],
          "title": "{slotslot({message})",
          "option": true,
          "valueType": "text"
        },
        "constcolon=getProp('colon')'": {
          "enum": [],
          "type": [
            "' : '';"
          ],
          "title": "constcolon=getProp('colon')'",
          "option": true,
          "valueType": "text"
        },
        "labelAlign==='top'[LeftIcon,Label]": {
          "enum": [],
          "type": [
            "Label;"
          ],
          "title": "labelAlign==='top'[LeftIcon,Label]",
          "option": true,
          "valueType": "text"
        },
        "title": {
          "enum": [
            "labelAlign===top?renderTitle:null"
          ],
          "type": [
            "string"
          ],
          "title": "title",
          "option": false,
          "valueType": "select"
        },
        "extra": {
          "enum": [],
          "type": [
            "slots.extra"
          ],
          "title": "extra",
          "option": false,
          "valueType": "text"
        },
        "[`label-${labelAlign}`]": {
          "enum": [],
          "type": [
            "labelAlign"
          ],
          "title": "[`label-${labelAlign}`]",
          "option": false,
          "valueType": "text"
        },
        "bem('label',[labelAlign,{required": {
          "enum": [],
          "type": [
            "props.required }])"
          ],
          "title": "bem('label',[labelAlign,{required",
          "option": false,
          "valueType": "text"
        }
      }
    },
    "events": {
      "type": "object",
      "title": "交互行为",
      "description": "组件动作事件",
      "required": [
        "constgetProp=<TextendsFieldFormSharedProps>(key",
        "construnRules=(rules",
        "constvalidateWithTrigger=(trigger",
        "constlimitValueLength=(value",
        "constonInput=(event",
        "constonFocus=(event",
        "constonBlur=(event",
        "constonClickInput=(event",
        "constonClickLeftIcon=(event",
        "constonClickRightIcon=(event",
        "constonClear=(event",
        "constonKeypress=(event",
        "target",
        "icon"
      ],
      "properties": {
        "constgetProp=<TextendsFieldFormSharedProps>(key": {
          "value": "T) => {",
          "title": "constgetProp=<TextendsFieldFormSharedProps>(key",
          "description": "constgetProp=<TextendsFieldFormSharedProps>(key",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "construnRules=(rules": {
          "value": "FieldRule[]) =>",
          "title": "construnRules=(rules",
          "description": "construnRules=(rules",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constvalidateWithTrigger=(trigger": {
          "value": "FieldValidateTrigger) => {",
          "title": "constvalidateWithTrigger=(trigger",
          "description": "constvalidateWithTrigger=(trigger",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constlimitValueLength=(value": {
          "value": "string) => {",
          "title": "constlimitValueLength=(value",
          "description": "constlimitValueLength=(value",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonInput=(event": {
          "value": "Event) => {",
          "title": "constonInput=(event",
          "description": "constonInput=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonFocus=(event": {
          "value": "Event) => {",
          "title": "constonFocus=(event",
          "description": "constonFocus=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonBlur=(event": {
          "value": "Event) => {",
          "title": "constonBlur=(event",
          "description": "constonBlur=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonClickInput=(event": {
          "value": "MouseEvent) => emit('clickInput' event);",
          "title": "constonClickInput=(event",
          "description": "constonClickInput=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonClickLeftIcon=(event": {
          "value": "MouseEvent) => emit('clickLeftIcon' event);",
          "title": "constonClickLeftIcon=(event",
          "description": "constonClickLeftIcon=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonClickRightIcon=(event": {
          "value": "MouseEvent) =>",
          "title": "constonClickRightIcon=(event",
          "description": "constonClickRightIcon=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonClear=(event": {
          "value": "TouchEvent) => {",
          "title": "constonClear=(event",
          "description": "constonClear=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonKeypress=(event": {
          "value": "KeyboardEvent) => {",
          "title": "constonKeypress=(event",
          "description": "constonKeypress=(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "target": {
          "value": "computed(() => clearIconRef.value?.$el)",
          "title": "target",
          "description": "target",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "icon": {
          "value": "LeftIcon && labelAlign !== 'top' ? () => LeftIcon : null",
          "title": "icon",
          "description": "icon",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        }
      }
    },
    "pkgId": {
      "title": "vant",
      "description": "组件库包名称"
    },
    "version": {
      "title": "4.0.2",
      "description": "组件库包版本"
    },
    "protoProps": {
      "type": "object",
      "title": "原生属性",
      "required": [],
      "properties": {
        "id": {
          "type": "string",
          "title": "唯一id",
          "valueType": "text",
          "description": "元素唯一标识"
        },
        "ref": {
          "type": "string",
          "title": "ref",
          "valueType": "text",
          "description": "组件ref名称，可在this.[ref名称]来获取组件实例this对象"
        },
        "style": {
          "type": "object",
          "title": "内联样式",
          "valueType": "object",
          "description": "组件内联样式(JSON格式)"
        },
        "className": {
          "type": "string",
          "title": "样式名",
          "valueType": "textarea",
          "description": "组件样式名"
        }
      },
      "description": "原生属性"
    },
    "lastModifyTime": {
      "type": "string",
      "title": "最后一次修改时间",
      "description": "2022-12-13"
    }
  },
  "lastModifyTime": "2022-12-13",
  "version": "4.0.2",
  "required": [
    null
  ],
  "description": "用户可以在文本框内输入或编辑文字。",
  "groupKey": "Form Components",
  "groupName": "表单组件",
  "isHidden": 0,
  "framework": "vue"
}