{
  "tagName": "Dialog",
  "pkgId": "vant",
  "type": "object",
  "properties": {
    "name": {
      "title": "Dialog 弹出框",
      "description": "组件名称"
    },
    "tagName": {
      "title": "Dialog",
      "description": "组件标签"
    },
    "advanceProps": {
      "title": "高级属性",
      "description": "高级属性",
      "type": "object",
      "properties": {
        "condition": {
          "title": "是否渲染",
          "description": "是否渲染",
          "type": "string",
          "valueType": "switch",
          "default": true
        }
      }
    },
    "hasChild": {
      "type": "boolean",
      "const": true,
      "title": "支持调用子组件",
      "description": "true:支持;false:不支持"
    },
    "props": {
      "type": "object",
      "title": "组件属性",
      "description": "组件属性",
      "required": [
        "title",
        "theme",
        "width",
        "message",
        "allowHtml",
        "className",
        "transition",
        "messageAlign",
        "closeOnPopstate",
        "showCancelButton",
        "cancelButtonText",
        "cancelButtonColor",
        "cancelButtonDisabled",
        "confirmButtonText",
        "confirmButtonColor",
        "confirmButtonDisabled",
        "showConfirmButton",
        "closeOnClickOverlay",
        "props",
        "emits",
        "confirm",
        "cancel",
        "args",
        "Enter",
        "Escape",
        "isolated",
        "'has-title'",
        "[messageAlignasstring]",
        "//see",
        "class={bem('content',{isolated",
        "style={{color",
        "class={[bem('confirm'),{[BORDER_LEFT]",
        "",
        "style={{width",
        "onUpdate"
      ],
      "properties": {
        "title": {
          "enum": [],
          "type": [
            "String"
          ],
          "title": "title",
          "option": false,
          "valueType": "text"
        },
        "theme": {
          "enum": [],
          "type": [
            "String as PropType<DialogTheme>"
          ],
          "title": "theme",
          "option": false,
          "valueType": "text"
        },
        "width": {
          "enum": [],
          "type": [
            "numericProp"
          ],
          "title": "width",
          "option": false,
          "valueType": "text"
        },
        "message": {
          "enum": [],
          "type": [
            "[String Function] as PropType<DialogMessage>"
          ],
          "title": "message",
          "option": false,
          "valueType": "text"
        },
        "allowHtml": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "allowHtml",
          "option": false,
          "valueType": "switch"
        },
        "className": {
          "enum": [],
          "type": [
            "unknownProp"
          ],
          "title": "className",
          "option": false,
          "valueType": "text"
        },
        "transition": {
          "enum": [],
          "type": [
            "makeStringProp('van-dialog-bounce')"
          ],
          "title": "transition",
          "option": false,
          "valueType": "text"
        },
        "messageAlign": {
          "enum": [],
          "type": [
            "String as PropType<DialogMessageAlign>"
          ],
          "title": "messageAlign",
          "option": false,
          "valueType": "text"
        },
        "closeOnPopstate": {
          "enum": [],
          "type": [
            "truthProp"
          ],
          "title": "closeOnPopstate",
          "option": false,
          "valueType": "text"
        },
        "showCancelButton": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "showCancelButton",
          "option": false,
          "valueType": "switch"
        },
        "cancelButtonText": {
          "enum": [],
          "type": [
            "String"
          ],
          "title": "cancelButtonText",
          "option": false,
          "valueType": "text"
        },
        "cancelButtonColor": {
          "enum": [],
          "type": [
            "String"
          ],
          "title": "cancelButtonColor",
          "option": false,
          "valueType": "text"
        },
        "cancelButtonDisabled": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "cancelButtonDisabled",
          "option": false,
          "valueType": "switch"
        },
        "confirmButtonText": {
          "enum": [],
          "type": [
            "String"
          ],
          "title": "confirmButtonText",
          "option": false,
          "valueType": "text"
        },
        "confirmButtonColor": {
          "enum": [],
          "type": [
            "String"
          ],
          "title": "confirmButtonColor",
          "option": false,
          "valueType": "text"
        },
        "confirmButtonDisabled": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "confirmButtonDisabled",
          "option": false,
          "valueType": "switch"
        },
        "showConfirmButton": {
          "enum": [],
          "type": [
            "truthProp"
          ],
          "title": "showConfirmButton",
          "option": false,
          "valueType": "text"
        },
        "closeOnClickOverlay": {
          "enum": [],
          "type": [
            "boolean"
          ],
          "title": "closeOnClickOverlay",
          "option": false,
          "valueType": "switch"
        },
        "props": {
          "enum": [],
          "type": [
            "dialogProps"
          ],
          "title": "props",
          "option": false,
          "valueType": "text"
        },
        "emits": {
          "enum": [],
          "type": [
            "['confirm' 'cancel' 'keydown' 'update:show']"
          ],
          "title": "emits",
          "option": false,
          "valueType": "text"
        },
        "confirm": {
          "enum": [],
          "type": [
            "false"
          ],
          "title": "confirm",
          "option": false,
          "valueType": "text"
        },
        "cancel": {
          "enum": [],
          "type": [
            "false"
          ],
          "title": "cancel",
          "option": false,
          "valueType": "text"
        },
        "args": {
          "enum": [],
          "type": [
            "[action]"
          ],
          "title": "args",
          "option": false,
          "valueType": "text"
        },
        "Enter": {
          "enum": [],
          "type": [
            "props.showConfirmButton ? onConfirm : noop"
          ],
          "title": "Enter",
          "option": false,
          "valueType": "text"
        },
        "Escape": {
          "enum": [],
          "type": [
            "props.showCancelButton ? onCancel : noop"
          ],
          "title": "Escape",
          "option": false,
          "valueType": "text"
        },
        "consttitle=slots.titleslots.title()": {
          "enum": [],
          "type": [
            "props.title;"
          ],
          "title": "consttitle=slots.titleslots.title()",
          "option": true,
          "valueType": "text"
        },
        "isolated": {
          "enum": [],
          "type": [
            "!props.message && !slots.default"
          ],
          "title": "isolated",
          "option": false,
          "valueType": "text"
        },
        "'has-title'": {
          "enum": [],
          "type": [
            "hasTitle"
          ],
          "title": "'has-title'",
          "option": false,
          "valueType": "text"
        },
        "[messageAlignasstring]": {
          "enum": [],
          "type": [
            "messageAlign"
          ],
          "title": "[messageAlignasstring]",
          "option": false,
          "valueType": "text"
        },
        "constcontent=isFunction(message)message()": {
          "enum": [],
          "type": [
            "message;"
          ],
          "title": "constcontent=isFunction(message)message()",
          "option": true,
          "valueType": "text"
        },
        "//see": {
          "enum": [],
          "type": [
            "https://github.com/vant-ui/vant/issues/7963"
          ],
          "title": "//see",
          "option": false,
          "valueType": "text"
        },
        "key={allowHtml1": {
          "enum": [],
          "type": [
            "0}"
          ],
          "title": "key={allowHtml1",
          "option": true,
          "valueType": "text"
        },
        "class={bem('content',{isolated": {
          "enum": [],
          "type": [
            "!hasTitle })}"
          ],
          "title": "class={bem('content',{isolated",
          "option": false,
          "valueType": "text"
        },
        "style={{color": {
          "enum": [],
          "type": [
            "props.confirmButtonColor }}"
          ],
          "title": "style={{color",
          "option": false,
          "valueType": "text"
        },
        "class={[bem('confirm'),{[BORDER_LEFT]": {
          "enum": [],
          "type": [
            "props.showCancelButton }]}"
          ],
          "title": "class={[bem('confirm'),{[BORDER_LEFT]",
          "option": false,
          "valueType": "text"
        },
        "": {
          "enum": [],
          "type": [
            "renderButtons();"
          ],
          "title": "",
          "option": false,
          "valueType": "text"
        },
        "style={{width": {
          "enum": [],
          "type": [
            "addUnit(width) }}"
          ],
          "title": "style={{width",
          "option": false,
          "valueType": "text"
        },
        "onUpdate": {
          "enum": [],
          "type": [
            "show={updateShow}"
          ],
          "title": "onUpdate",
          "option": false,
          "valueType": "text"
        }
      }
    },
    "events": {
      "type": "object",
      "title": "交互行为",
      "description": "组件动作事件",
      "required": [
        "callback",
        "constupdateShow=(value",
        "constclose=(action",
        "constgetActionHandler=(action",
        "(event",
        "constonEventType",
        "constrenderMessage=(hasTitle"
      ],
      "properties": {
        "callback": {
          "value": "Function as PropType<(action?: DialogAction) => void>",
          "title": "callback",
          "description": "callback",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constupdateShow=(value": {
          "value": "boolean) => emit('update:show' value);",
          "title": "constupdateShow=(value",
          "description": "constupdateShow=(value",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constclose=(action": {
          "value": "DialogAction) => {",
          "title": "constclose=(action",
          "description": "constclose=(action",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constgetActionHandler=(action": {
          "value": "DialogAction) => () => {",
          "title": "constgetActionHandler=(action",
          "description": "constgetActionHandler=(action",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "(event": {
          "value": "KeyboardEvent) => {",
          "title": "(event",
          "description": "(event",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constonEventType": {
          "value": "Record<string () => void> = {",
          "title": "constonEventType",
          "description": "constonEventType",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        },
        "constrenderMessage=(hasTitle": {
          "value": "boolean) => {",
          "title": "constrenderMessage=(hasTitle",
          "description": "constrenderMessage=(hasTitle",
          "type": "object",
          "properties": {
            "name": {
              "description": "函数名",
              "title": "函数名",
              "type": "string"
            }
          }
        }
      }
    },
    "pkgId": {
      "title": "vant",
      "description": "组件库包名称"
    },
    "version": {
      "title": "4.0.2",
      "description": "组件库包版本"
    },
    "protoProps": {
      "type": "object",
      "title": "原生属性",
      "required": [],
      "properties": {
        "id": {
          "type": "string",
          "title": "唯一id",
          "valueType": "text",
          "description": "元素唯一标识"
        },
        "ref": {
          "type": "string",
          "title": "ref",
          "valueType": "text",
          "description": "组件ref名称，可在this.[ref名称]来获取组件实例this对象"
        },
        "style": {
          "type": "object",
          "title": "内联样式",
          "valueType": "object",
          "description": "组件内联样式(JSON格式)"
        },
        "className": {
          "type": "string",
          "title": "样式名",
          "valueType": "textarea",
          "description": "组件样式名"
        }
      },
      "description": "原生属性"
    },
    "lastModifyTime": {
      "type": "string",
      "title": "最后一次修改时间",
      "description": "2022-12-13"
    }
  },
  "lastModifyTime": "2022-12-13",
  "version": "4.0.2",
  "required": [
    null
  ],
  "description": "弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作。支持组件调用和函数调用两种方式。",
  "groupKey": "Action Components",
  "groupName": "反馈组件",
  "isHidden": 0,
  "framework": "vue"
}